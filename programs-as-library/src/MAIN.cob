       IDENTIFICATION DIVISION.
       PROGRAM-ID.    MAIN.
      *ENVIRONMENT DIVISION.
      *CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      * 01 WS.
       COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-V1-==.
       COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-V2-==.

      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-CONJPARM-==.

      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-REALPARM-==.

      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-IMAGPARM-==.

      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-MULTPARM-IN1-==.
      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-MULTPARM-IN2-==.
      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-MULTPARM-OUT-==.

       COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-ADDPARM-OUT-==.
       COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-SUBPARM-OUT-==.

      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-DIVPARM-IN1-==.
      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-DIVPARM-IN2-==.
      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-DIVPARM-OUT-==.

      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-INVPARM-IN-==.
      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-INVPARM-OUT-==.
      *COPY FLOAT REPLACING ==(PRFX)== BY ==WS-INV-MAGNITUDE-==.

      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-NEGPARM-IN-==.
      *COPY COMPLEX REPLACING ==(PRFX)== BY ==WS-NEGPARM-OUT-==.

      *COPY FLOAT REPLACING ==(PRFX)== BY ==WS-REAL-==.

      *COPY FLOAT REPLACING ==(PRFX)== BY ==WS-IMAG-==.
      *01 WS-DISPPARM-N PIC X(20) VALUE SPACES.
        COPY CDISPLAY REPLACING ==(PRFX)== BY ==WS-DISPPARM-==.
       PROCEDURE DIVISION.

      * A = (1,2)
           MOVE 1 TO WS-V1-RE
           MOVE 2 TO WS-V1-IM
           MOVE 'A' TO WS-DISPPARM-N

           CALL 'CDISPLAY' USING
             WS-DISPPARM-N,
             WS-V1-COMPLEX

      * B = (3,4)
           MOVE 3 TO WS-V2-RE
           MOVE 4 TO WS-V2-IM

           MOVE 'B' TO WS-DISPPARM-N
           CALL 'CDISPLAY' USING
             WS-DISPPARM-N,
             WS-V2-COMPLEX

      * C = A + B
           CALL 'CADD' USING
             WS-V1-COMPLEX,
             WS-V2-COMPLEX,
             WS-ADDPARM-OUT-COMPLEX

           MOVE 'A + B' TO WS-DISPPARM-N
           CALL 'CDISPLAY' USING
             WS-DISPPARM-N,
             WS-ADDPARM-OUT-COMPLEX

      * D = A - B
           CALL 'CSUB' USING
             WS-V2-COMPLEX,
             WS-V1-COMPLEX,
             WS-SUBPARM-OUT-COMPLEX

           MOVE 'B - A' TO WS-DISPPARM-N
           CALL 'CDISPLAY' USING
             WS-DISPPARM-N,
             WS-SUBPARM-OUT-COMPLEX

      *    MOVE WS-V1-COMPLEX TO WS-SUBPARM-IN1-COMPLEX
      *    MOVE WS-V2-COMPLEX TO WS-SUBPARM-IN2-COMPLEX
      *    CALL CSUB
      *    MOVE WS-SUBPARM-OUT-COMPLEX TO WS-DISPPARM-COMPLEX
      *    MOVE 'A - B' TO WS-DISPPARM-N
      *    CALL CDISPLAY

      *    MOVE WS-V1-COMPLEX TO WS-CONJPARM-COMPLEX
      *    CALL CCONJUGATE
      *    MOVE WS-CONJPARM-COMPLEX TO WS-DISPPARM-COMPLEX
      *    MOVE 'CONJ(A)' TO WS-DISPPARM-N
      *    CALL CDISPLAY

      *    MOVE WS-V1-COMPLEX TO WS-REALPARM-COMPLEX
      *    CALL CREAL
      *    MOVE WS-REAL-V TO WS-DISPPARM-RE
      *    MOVE 0         TO WS-DISPPARM-IM
      *    MOVE 'RE(A)' TO WS-DISPPARM-N
      *    CALL CDISPLAY

      *    MOVE WS-V1-COMPLEX TO WS-IMAGPARM-COMPLEX
      *    CALL CIMAG
      *    MOVE WS-IMAG-V TO WS-DISPPARM-RE
      *    MOVE 0         TO WS-DISPPARM-IM
      *    MOVE 'IM(A)' TO WS-DISPPARM-N
      *    CALL CDISPLAY

      *    MOVE WS-V1-COMPLEX TO WS-MULTPARM-IN1-COMPLEX
      *    MOVE WS-V2-COMPLEX TO WS-MULTPARM-IN2-COMPLEX
      *    CALL CMULT
      *    MOVE WS-MULTPARM-OUT-COMPLEX TO WS-DISPPARM-COMPLEX
      *    MOVE 'A * B' TO WS-DISPPARM-N
      *    CALL CDISPLAY

      *    MOVE WS-V1-COMPLEX TO WS-INVPARM-IN-COMPLEX
      *    CALL CINVERSE
      *    MOVE WS-INVPARM-OUT-COMPLEX TO WS-DISPPARM-COMPLEX
      *    MOVE '1/A' TO WS-DISPPARM-N
      *    CALL CDISPLAY

      *    MOVE WS-V1-COMPLEX TO WS-NEGPARM-IN-COMPLEX
      *    CALL CNEGATE
      *    MOVE WS-NEGPARM-OUT-COMPLEX TO WS-DISPPARM-COMPLEX
      *    MOVE '-A' TO WS-DISPPARM-N
      *    CALL CDISPLAY

      *    MOVE WS-V1-COMPLEX TO WS-DIVPARM-IN1-COMPLEX
      *    MOVE WS-V2-COMPLEX TO WS-DIVPARM-IN2-COMPLEX
      *    CALL CDIVIDE
      *    MOVE WS-DIVPARM-OUT-COMPLEX TO WS-DISPPARM-COMPLEX
      *    MOVE 'A/B' TO WS-DISPPARM-N
      *    CALL CDISPLAY

           GOBACK
           .

      * vim: et ts=4 sw=4
